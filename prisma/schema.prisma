generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  password String?
  role     String  @default("user")

  name    String @default("Not specified")
  picture String @default("/uploads/no-user-image.png")

  stores Store[]

  favorites Product[]
  reviews   Review[]
  orders    Order[]

  @@map("user")
}

model Store {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  products   Product[]
  categories Category[]
  colors     Color[]
  reviews    Review[]
  orderItems OrderItem[]
  Wishlist   Wishlist[]
  Donation   Donation[]
  Rewards    Rewards[]

  @@map("store")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  price       Int
  images      String[]
  video       String   @default("none")
  times       Int

  donationDescriptions String[] @default([])
  donationAmounts      String[] @default([])

  reviews    Review[]
  orderItems OrderItem[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  color   Color?  @relation(fields: [colorId], references: [id])
  colorId String? @map("color_id")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  wishlists Wishlist[]

  transactions Transaction[]
  rewards      Rewards[]
  donation     Donation[]

  @@map("product")
}

model Donation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  description String
  amountGoal  Int

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")
  Order     Order[]

  @@map("donation")
}

model Wishlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  images      String[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("wishlist")
}

model Rewards {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  price       Int

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("rewards")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  products Product[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("category")
}

model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  value String

  products Product[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("color")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  rating Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("review")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)
  total  Int

  paymentIntentId String? @unique
  paymentStatus   String?
  paymentMethod   String?

  items OrderItem[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  donation   Donation? @relation(fields: [donationId], references: [id])
  donationId String?   @map("donation_id")

  transactions Transaction[]

  @@map("order")
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  amount          Int
  paymentIntentId String  @unique
  paymentMethod   String?

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("transaction")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
